# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

### Home page ###
GET     /                          					controllers.Application.index

### Authentication ###
#GET     /api/v1/login								controllers.Application.login
#POST    /api/v1/login								controllers.Application.authenticate
#GET     /api/v1/logout								controllers.Application.logout

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               				controllers.Assets.at(path="/public", file)

### Users ###
# This will NOT SCALE - needs pagination, range, or filter by some limiting criteria like location
GET		/api/v1/users								controllers.Users.allUsers
POST	/api/v1/users								controllers.Users.createUser
GET		/api/v1/users/:id							controllers.Users.byId(id: Long)
POST	/api/v1/users/profile						controllers.Users.createUserProfile
GET		/api/v1/users/:id/profile					controllers.Users.profile(id: Long)
GET		/api/v1/users/:id/contacts					controllers.Users.contacts(id: Long)
GET		/api/v1/users/:id/itinerary					controllers.Users.itinerary(id: Long)
POST	/api/v1/users/:userId/contact/:contactId	controllers.Users.associateUserContact(userId: Long, contactId: Long)
GET		/api/v1/users/contacts/:userId				controllers.Users.contacts(userId: Long)		

### Events ###
POST	/api/v1/events								controllers.Events.createEvent
# This will NOT SCALE - needs pagination, range, or filter by some limiting criteria like location
GET		/api/v1/events								controllers.Events.allEvents
GET		/api/v1/events/:id							controllers.Events.byId(id: Long)
GET		/api/v1/events/user/:id						controllers.Events.byUserId(id: Long)
GET		/api/v1/events/:eventId/users				controllers.Events.usersByEventId(eventId: Long)
POST	/api/v1/events/:eventId/user/:userId		controllers.Events.associateEventUser(eventId: Long, userId: Long)
GET		/api/v1/events/location/:locId/:radius		controllers.Events.byLocationRadius(locId: Long, radius: Int)
GET		/api/v1/events/location/:lat/:lon/:radius	controllers.Events.byLatLonRadius(lat: Double, lon: Double, radius: Int)
GET		/api/v1/activity-types/all					controllers.Events.allActivityTypes

### Locations ###
POST	/api/v1/locations/place						controllers.Locations.createPlace
POST	/api/v1/locations/place-synd				controllers.Locations.createPlaceSynd
GET		/api/v1/locations/place-synd/:id			controllers.Locations.placeThirdPartyById(id: Long)
GET		/api/v1/locations/place/:id/place-synd		controllers.Locations.placeThirdPartyByTTPlaceId(id: Long)
# This will NOT SCALE - needs pagination, range, or filter by some limiting criteria like location
GET		/api/v1/locations							controllers.Locations.allLocations
GET		/api/v1/locations/:locId					controllers.Locations.byId(locId: Long)
GET		/api/v1/locations/place/:placeId			controllers.Locations.placeById(placeId: Long)
GET		/api/v1/locations/place/:lat/:lon/:radius	controllers.Locations.placesByLatLonRadius(lat: Double, lon: Double, radius: Int)




